* 模式匹配
** match
   match 表达式必须是 穷尽（exhaustive）的，意为 match 表达式所有可能的值都必须
   被考虑到。一个确保覆盖每个可能值的方法是在最后一个分支使用捕获所有的模式：比
   如，一个匹配任何值的名称永远也不会失败，因此可以覆盖所有匹配剩下的情况。

   有一个特定的模式 _ 可以匹配所有情况，不过它从不绑定任何变量
   #+begin_src rust
   match VALUE {
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
    PATTERN => EXPRESSION,
   }
   #+end_src
   - 匹配字面值
     #+begin_src rust
      let x = 1;

      match x {
          1 => println!("one"),
          2 => println!("two"),
          3 => println!("three"),
          _ => println!("anything"),
      }
     #+end_src

   - 匹配命名变量

     命名变量是匹配任何值的不可反驳模式
     match 会开始一个新作用域，match 表达式中作为模式的一部分声明的变量会覆盖
     match 结构之外的同名变量，与所有变量一样
     #+begin_src rust
      fn main() {
          let x = Some(5);
          let y = 10;

          match x {
              Some(50) => println!("Got 50"),
              Some(y) => println!("Matched, y = {:?}", y), // 匹配； 新变量 y 绑定会匹配任何 Some 中的值，在这里是 x 中的值  “ Matched, y = 5”
              _ => println!("Default case, x = {:?}", x),
          }

          println!("at the end: x = {:?}, y = {:?}", x, y); // at the end: x = Some(5), y = 10
      }
     #+end_src

   - 多个模式
     在 match 表达式中，可以使用 | 语法匹配多个模式，它代表 或（or）的意思
     
     #+begin_src rust
      let x = 1;

      match x {
          1 | 2 => println!("one or two"),
          3 => println!("three"),
          _ => println!("anything"),
      }
     #+end_src

   - 通过 ~...~ 匹配值的范围
     ... 语法允许你匹配一个闭区间范围内的值。在如下代码中，当模式匹配任何在此范围内的值时，该分支会执行

     范围只允许用于数字或 char 值，因为编译器会在编译时检查范围不为空。char 和 数字值是 Rust 唯一知道范围是否为空的类型

     #+begin_src rust
      let x = 5;

      match x {
          1 ... 5 => println!("one through five"),
          _ => println!("something else"),
      }

      let x = 'c';

      match x {
          'a' ... 'j' => println!("early ASCII letter"),
          'k' ... 'z' => println!("late ASCII letter"),
          _ => println!("something else"),
      }
     #+end_src
** if let 表达式
   只关心一个情况的 match 语句简写的。if let 可以对应一个可选的带有代码的 else
   在 if let 中的模式不匹配时运行
   
   if let 表达式的缺点在于其穷尽性没有为编译器所检查，而 match 表达式则检查了。
   如果去掉最后的 else 块而遗漏处理一些情况，编译器也不会警告这类可能的逻辑错误
** while let 条件循环 
   它允许只要模式匹配就一直进行 while 循环
   一旦其返回 None，while 循环停止
** for 循环 
   在 for 循环中，模式是 for 关键字直接跟随的值，正如 for x in y 中的 x
   #+begin_src rust
   
   let v = vec!['a', 'b', 'c'];

   for (index, value) in v.iter().enumerate() {
       println!("{} is at index {}", value, index);
   }
   #+end_src
** let 语句
   变量名不过是形式特别朴素的模式。我们将表达式与模式比较，并为任何找到的名称赋
   值

   #+begin_src rust
   let PATTERN = EXPRESSION;
   #+end_src

   解构一个元组:
   Rust 会比较值 (1, 2, 3) 与模式 (x, y, z) 并发现此值匹配这个模式。在这个例子中，
   将会把 1 绑定到 x，2 绑定到 y 并将 3 绑定到 z。你可以将这个元组模式看作是将三
   个独立的变量模式结合在一起

   如果希望忽略元组中一个或多个值，也可以使用 _ 或 ..

   #+begin_src rust
   let (x, y, z) = (1, 2, 3);
   #+end_src
** 函数参数
   x 部分就是一个模式！类似于之前对 let 所做的
   #+begin_src rust
   fn foo(x: i32) {
   // 代码
   }
   #+end_src

   #+begin_src rust
    fn print_coordinates(&(x, y): &(i32, i32)) {
      println!("Current location: ({}, {})", x, y);
    }

    fn main() {
        let point = (3, 5);
        print_coordinates(&point);
    }
   #+end_src

* 模式类型 
  模式有两种形式：refutable（可反驳的）和 irrefutable（不可反驳的）
  - refutable（可反驳的）
    能匹配任何传递的可能值的模式被称为是 不可反驳的（irrefutable）
    
    let 语句、 函数参数和 for 循环只能接受不可反驳的模式，因为通过不匹配的值程序
    无法进行有意义的工作

  - irrefutable（不可反驳的）
   对某些可能的值进行匹配会失败的模式被称为是 可反驳的（refutable）

   if let 和 while let 表达式被限制为只能接受可反驳的模式，因为根据定义他们意在
    处理可能的失败：条件表达式的功能就是根据成功或失败执行不同的操作

* 解构并分解值 
  也可以使用模式来解构结构体、枚举、元组和引用，以便使用这些值的不同部分。
  - 解构结构体
    #+begin_src rust
      struct Point {
          x: i32,
          y: i32,
      }

      fn main() {
          let p = Point { x: 0, y: 7 };

          let Point { x: a, y: b } = p;
          assert_eq!(0, a);
          assert_eq!(7, b);
      }
    #+end_src
    
    在部分结构体模式中使用字面值进行结构，而不是为所有的字段创建变量
    #+begin_src rust
      fn main() {
          let p = Point { x: 0, y: 7 };

          match p {
              Point { x, y: 0 } => println!("On the x axis at {}", x),
              Point { x: 0, y } => println!("On the y axis at {}", y),
              Point { x, y } => println!("On neither axis: ({}, {})", x, y),
          }
      }
    #+end_src

  - 解构枚举
    #+begin_src rust
      enum Message {
          Quit,
          Move { x: i32, y: i32 },
          Write(String),
          ChangeColor(i32, i32, i32),
      }

      fn main() {
          let msg = Message::ChangeColor(0, 160, 255);

          match msg {
              Message::Quit => {
                  println!("The Quit variant has no data to destructure.")
              },
              Message::Move { x, y } => {
                  println!(
                      "Move in the x direction {} and in the y direction {}",
                      x,
                      y
                  );
              }
              Message::Write(text) => println!("Text message: {}", text),
              Message::ChangeColor(r, g, b) => {
                  println!(
                      "Change the color to red {}, green {}, and blue {}",
                      r,
                      g,
                      b
                  )
              }
          }
      }
    #+end_src

  - 解构引用
    当模式所匹配的值中包含引用时，需要解构引用之中的值，这可以通过在模式中指定 & 做到

    这让我们得到一个包含引用所指向数据的变量，而不是包含引用的变量
    
    这个技术在通过迭代器遍历引用时，我们需要使用闭包中的值而不是其引用时非常有用。
    #+begin_src rust
      let points = vec![
          Point { x: 0, y: 0 },
          Point { x: 1, y: 5 },
          Point { x: 10, y: -3 },
      ];

      let sum_of_squares: i32 = points
          .iter()
          .map(|&Point { x, y }| x * x + y * y)
          .sum();
    #+end_src

  - 忽略值
    + 使用 _ 忽略整个值
        #+begin_src rust
          fn foo(_: i32, y: i32) {
              println!("This code only uses the y parameter: {}", y);
          }

          fn main() {
              foo(3, 4);
          }
        #+end_src

    + 使用嵌套的 _ 忽略部分值
      当只需要测试部分值但在期望运行的代码部分中没有使用它们时，也可以在另一个模式内部使用 _ 来只忽略部分值
      #+begin_src rust
      let mut setting_value = Some(5);
      let new_setting_value = Some(10);

      match (setting_value, new_setting_value) {
          (Some(_), Some(_)) => {
              println!("Can't overwrite an existing customized value");
          }
          _ => {
              setting_value = new_setting_value;
          }
      }

      println!("setting is {:?}", setting_value);
      #+end_src

    + 通过在名字前以一个下划线开头来忽略未使用的变量
      注意, 只使用 _ 和使用以下划线开头的名称有些微妙的不同：比如 _x 仍会将值绑定到变量，而 _ 则完全不会绑定      
      #+begin_src rust
        fn main() {
            let _x = 5;
            let y = 10;
        }

      //  以下划线开头的未使用变量仍然会绑定值，它可能会获取值的所有权
      // 因为 s 的值仍然会移动进 _s，并阻止我们再次使用 s
      let s = Some(String::from("Hello!"));

      if let Some(_s) = s {
          println!("found a string");
      }

      println!("{:?}", s);

      // 然而只使用下划线本身，并不会绑定值
      let s = Some(String::from("Hello!"));

      if let Some(_) = s {
          println!("found a string");
      }

      println!("{:?}", s);
      #+end_src

    + 用 .. 忽略剩余值
      对于有多个部分的值，可以使用 .. 语法来只使用部分并忽略其它值，同时避免不得不每一个忽略值列出下划线。.. 模式会忽略模式中剩余的任何没有显式匹配的值部分
      #+begin_src rust
        struct Point {
            x: i32,
            y: i32,
            z: i32,
        }

        let origin = Point { x: 0, y: 0, z: 0 };

        match origin {
            Point { x, .. } => println!("x is {}", x),
        }

        let numbers = (2, 4, 8, 16, 32);

        match numbers {
           (first, .., last) => {
               println!("Some numbers: {}, {}", first, last);
           },
        }
      #+end_src

* 匹配守卫提供的额外条件
  匹配守卫（match guard）是一个指定与 match 分支模式之后的额外 if 条件，它也必须被满足才能选择此分支。匹配守卫用于表达比单独的模式所能允许的更为复杂的情况

  这个条件可以使用模式中创建的变量

  #+begin_src rust
    let num = Some(4);

    match num {
        Some(x) if x < 5 => println!("less than five: {}", x),
        Some(x) => println!("{}", x),
        None => (),
    }
  #+end_src
  
  也可以在匹配守卫中使用 或 运算符 | 来指定多个模式，同时匹配守卫的条件会作用域所有的模式

  #+begin_src rust
  let x = 4;
  let y = false;

  
  // (4 | 5 | 6) if y => ...
  match x {
      4 | 5 | 6 if y => println!("yes"),
      _ => println!("no"),
  }
  #+end_src

* @ 绑定
  at 运算符（@）允许我们在创建一个存放值的变量的同时测试其值是否匹配模式

  #+begin_src rust
  
  enum Message {
      Hello { id: i32 },
  }

  let msg = Message::Hello { id: 5 };

  match msg {
      Message::Hello { id: id_variable @ 3...7 } => {
          println!("Found an id in range: {}", id_variable)
      },
      Message::Hello { id: 10...12 } => {
          println!("Found an id in another range")
      },
      Message::Hello { id } => {
          println!("Found some other id: {}", id)
      },
  }
  #+end_src

* +遗留模式： ref 和 ref mut+ 
  在老版本的 Rust 中，match 会假设你希望移动匹配到的值。不过有时并不希望如此。例如：

  ref 关键字就像模式中 & 的对立面；它表明 “请将 ref 绑定到一个 &String 上，不要尝试移动”。换句话说，&Some 中的 & 匹配的是一个引用，而 ref 创建 了一个引用。ref mut 类似 ref 不过对应的是可变引用

  
  #+begin_src rust
    let robot_name = &Some(String::from("Bors"));

    match robot_name {
        &Some(ref name) => println!("Found a name: {}", name),
        None => (),
    }

    println!("robot_name is: {:?}", robot_name);
  #+end_src
