* Rust 包和模块
  [[https://lelouchhe.github.io/rust_3_2][包和模块]]，和Rust模块系统相关的有2个概念: 包(crate)和模块(module).包和其他语言
  中的库(library)或包(package)是类似的.因此,Cargo就相当于我们的包管理工具:使用
  Cargo将我们的包传给别人.根据项目的不同,包可以用来构建可执行程序(executable)或
  者共享库(shared library).

  模块允许我们将代码组织起来,每个包都有一个隐含的根模块(root module),包含着包的
  全部代码.可以在根模块下定义树形的子模块.模块让你可以在包内部区分不同的代码.

** 包(create)
  根据项目的不同,包可以用来构建可执行程序(executable)或
  者共享库(shared library);

  一个包可以带有零个或一个库 crate 和任意多个二进制 crate。一个包中必须带有至少
  一个（库或者二进制）crate。

  - ~src/main.rs~ 
    这个包带有一个与包同名的二进制 crateCargo 的约定是如果在代表包的
    Cargo.toml 的同级目录下包含 src 目录且其中包含 main.rs 文件的话，Cargo 就
    知道这个包带有一个与包同名的二进制 crate，且 src/main.rs 就是 crate 根

  - ~src/lib.rs~ 
    包目录中包含 src/lib.rs，则包带有与其同名的库 crate，且 src/lib.rs 是
    crate 根

  - ~src/bin~
    包可以带有多个二进制 crate，需将其文件置于 src/bin 目录；每个文件将是一个
    单独的二进制 crate

  
** 模块(module)
   组织代码和控制路径私有性的方式;
   - 模块定义
     - 同一个文件
       #+begin_src rust
          mod sound {
              mod instrument {
                  mod woodwind {
                      fn clarinet() {
                          // 函数体
                      }
                  }
              }

              mod voice {

              }
          }

          fn main() {

          } 
       #+end_src

     - 基于文件路径
       #+begin_quote
      ./src/
      ├── main.rs
      └── sound
          └── instrument
              └── woodwind.rs    
       #+end_quote
   - 私有性边界
     模块是 Rust 中的 私有性边界（privacy boundary）如果你希望函数或结构体是私有
     的，将其放入模块。私有性规则有如下：
     
     - 所有项（函数、方法、结构体、枚举、模块和常量）默认是私有的。
     - 可以使用 pub 关键字使项变为公有。
     - 不允许使用定义于当前模块的子模块中的私有代码。
     - 允许使用任何定义于父模块或当前模块中的代码。
     *对于没有 pub 关键字的项，当你从当前模块向 “下” 看时是私有的，不过当你向
     “上” 看时是公有的*
     
     *公有的结构体,必须设置其属性为公有*
     #+begin_src rust
      mod plant {
          pub struct Vegetable {
              pub name: String,
              id: i32,
          }

          impl Vegetable {
              pub fn new(name: &str) -> Vegetable {
                  Vegetable {
                      name: String::from(name),
                      id: 1,
                  }
              }
          }
      }

      
     #+end_src
     *公有枚举，其所有成员都是公有。只需在 enum 关键词前加上 pub*
     #+begin_src rust
      mod menu {
          pub enum Appetizer {
              Soup,
              Salad,
          }
      }

      fn main() {
          let order1 = menu::Appetizer::Soup;
          let order2 = menu::Appetizer::Salad;
      }
     #+end_src
   - 模块引用
     绝对路径和相对路径都后跟一个或多个由双冒号（::）分割的标识符。
     
      #+begin_src rust
        mod sound {
          pub mod instrument {
              pub  fn clarinet() {
                    // 函数体
                }
            }
        }

        fn main() {
            // 绝对路径
            crate::sound::instrument::clarinet();

            // 相对路径
            sound::instrument::clarinet();
        }
      #+end_src

     - 绝对路径（absolute path）从 crate 根开始，以 crate 名或者字面值 crate 开
       头       
     - 相对路径（relative path）从当前模块开始，以 self、super 或当前模块的标识
       符开头
       - 也可以使用 super 开头来构建相对路径。这么做类似于文件系统中以 .. 开头：
         该路径从 父 模块开始而不是当前模块
         #+begin_src rust
          mod instrument {
              fn clarinet() {
                  super::breathe_in();
              }
          }

          fn breathe_in() {
              // 函数体
          }
         #+end_src
         clarinet 函数位于 instrument 模块中，所以可以使用 super 进入 instrument
         的父模块，也就是根 crate。从这里可以找到 breathe_in

     - 使用 use 引入作用域
       - 绝对路径
         #+begin_src rust
          mod sound {
              pub mod instrument {
                  pub fn clarinet() {
                      // 函数体
                  }
              }
          }

          use crate::sound::instrument;

          fn main() {
              instrument::clarinet();
              instrument::clarinet();
              instrument::clarinet();
          }
         #+end_src
       - 相对路径
         通过 use 和相对路径来将项引入作用域，则与直接通过相对路径调用项有些小的
         区别：不同于从当前作用域的名称开始，use 中的路径必须以 self开头
         *当指定 use 后以 self 开头的相对路径在未来可能不是必须的*
         #+begin_src rust
          mod sound {
              pub mod instrument {
                  pub fn clarinet() {
                      // 函数体
                  }
              }
          }

          use self::sound::instrument;

          fn main() {
              instrument::clarinet();
              instrument::clarinet();
              instrument::clarinet();
          }
         #+end_src
       - 通过 as 重命名作用域
         #+begin_src rust
         use std::fmt::Result;
         use std::io::Result as IoResult;

         fn function1() -> Result {
         }
         fn function2() -> IoResult<()> {
         }
         #+end_src
       - pub use 重导出
         当使用 use 关键字将名称导入作用域时，在新作用域中可用的名称是私有的。如
         果希望调用你编写的代码的代码能够像你一样在其自己的作用域内引用这些类型，
         可以结合 pub 和 use。这个技术被称为 “重导出”（re-exporting），因为这样
         做将项引入作用域并同时使其可供其他代码引入自己的作用域

         #+begin_src rust
          mod sound {
              pub mod instrument {
                  pub fn clarinet() {
                      // 函数体
                  }
              }
          }

          mod performance_group {
              pub use crate::sound::instrument;

              pub fn clarinet_trio() {
                  instrument::clarinet();
                  instrument::clarinet();
                  instrument::clarinet();
              }
          }

          fn main() {
              performance_group::clarinet_trio();
              performance_group::instrument::clarinet();
          }
         #+end_src
       - 使用外部包
         #+begin_src rust
         // Cargo.toml
         [dependencies]
         rand = "0.5.5"
         
         // src/main.rs
         use rand::Rng;
         fn main() {
         let secret_number = rand::thread_rng().gen_range(1, 101);
         }
         #+end_src
       - 使用嵌套路径消除多余行
         可以使用嵌套的路径将同样的项在一行中引入而不是两行，这么做需要指定路径
         的相同部分，接着是两个冒号，接着是大括号中的各自不同的路径部分

         #+begin_src rust
         use std::cmp::Ordering;
         use std::io;
         // ---snip---

         use std::{cmp::Ordering, io};
         // ---snip---
         #+end_src

         也可以剔除掉完全包含在另一个路径中的路径
         #+begin_src rust
         use std::io;
         use std::io::Write;

         use std::io::{self, Write};
         #+end_src
       - 路径下 所有 公有项引入作用域
         #+begin_src rust
         use std::collections::*;
         #+end_src
